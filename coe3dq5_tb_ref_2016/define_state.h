`ifndef DEFINE_STATE

// This defines the states

typedef enum logic [4:0] {
	S_IDLE,
	S_WAIT_NEW_PIXEL_ROW,
	S_NEW_PIXEL_ROW_DELAY_1,
	S_NEW_PIXEL_ROW_DELAY_2,
	S_NEW_PIXEL_ROW_DELAY_3,
	S_NEW_PIXEL_ROW_DELAY_4,
	S_NEW_PIXEL_ROW_DELAY_5,
	S_FETCH_PIXEL_DATA_0,
	S_FETCH_PIXEL_DATA_1,
	S_FETCH_PIXEL_DATA_2,
	S_FETCH_PIXEL_DATA_3,
	S_FETCH_PIXEL_DATA_4,
	S_FETCH_PIXEL_DATA_5,
	S_FETCH_PIXEL_DATA_6,
	S_FETCH_PIXEL_DATA_7,
	S_FILL_SRAM_RED,
	S_FILL_SRAM_GREEN_EVEN,
	S_FILL_SRAM_GREEN_ODD,
	S_FILL_SRAM_BLUE_EVEN,
	S_FILL_SRAM_BLUE_ODD,
	S_FINISH_FILL_SRAM
} state_type;

typedef enum logic [1:0] {
	S_IDLE,
	S_COLOR_CONVERSION_DELAY_0,
	S_COLOR_CONVERSION_DELAY_1,
	S_COLOR_CONVERSION
} state_top;

typedef enum logic [1:0] {
	S_RXC_IDLE,
	S_RXC_SYNC,
	S_RXC_ASSEMBLE_DATA,
	S_RXC_STOP_BIT
} RX_Controller_state_type;

typedef enum logic [3:0] {
	S_VS_WAIT_NEW_PIXEL_ROW,
	S_VS_NEW_PIXEL_ROW_DELAY_1,
	S_VS_NEW_PIXEL_ROW_DELAY_2,
	S_VS_NEW_PIXEL_ROW_DELAY_3,
	S_VS_NEW_PIXEL_ROW_DELAY_4,
	S_VS_NEW_PIXEL_ROW_DELAY_5,
	S_VS_FETCH_PIXEL_DATA_0,
	S_VS_FETCH_PIXEL_DATA_1,
	S_VS_FETCH_PIXEL_DATA_2,
	S_VS_FETCH_PIXEL_DATA_3

} VGA_SRAM_state_type;

typedef enum logic [3:0] {
	S_US_IDLE,
	S_US_STRIP_FILE_HEADER_1,
	S_US_STRIP_FILE_HEADER_2,
	S_US_START_FIRST_BYTE_RECEIVE,
	S_US_WRITE_FIRST_BYTE,
	S_US_START_SECOND_BYTE_RECEIVE,
	S_US_WRITE_SECOND_BYTE
} UART_SRAM_state_type;

`define DEFINE_STATE 1
`endif
